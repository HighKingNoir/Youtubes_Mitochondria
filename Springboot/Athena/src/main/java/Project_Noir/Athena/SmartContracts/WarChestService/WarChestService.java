package Project_Noir.Athena.SmartContracts.WarChestService;


import org.web3j.abi.FunctionEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Int256;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple4;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.5.0.
 */
@SuppressWarnings("rawtypes")
public class WarChestService extends Contract {
    public static final String BINARY = "60c0604052735dd76afef498fab393dc0115346b201033f6547c608052600380546001600160a01b03191673a1cbf3fe43bc3501e3fc4b573e822c70e76a751217905534801561004e57600080fd5b50604051612c49380380612c4983398101604081905261006d916100e7565b6001600160a01b0390811660a08190526102ee60055560805160008054600181810183558280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5639182018054949096166001600160a01b0319948516179095558154948501909155929092018054909216179055610117565b6000602082840312156100f957600080fd5b81516001600160a01b038116811461011057600080fd5b9392505050565b60805160a051612adc61016d60003960008181610313015281816106d3015281816107b101528181610aae0152610b8c0152600081816104fa0152818161135501528181611ac10152611b7d0152612adc6000f3fe6080604052600436106101235760003560e01c806364b55bed116100a0578063b384626c11610064578063b384626c14610395578063b709cdb6146103c5578063da6bf983146103e5578063fc31ad4214610405578063ff7812a7146104255761012a565b806364b55bed146102c9578063861b65c5146103015780638bd2972c146103355780639a4ade9b14610355578063affc72a4146103755761012a565b8063436c3248116100e7578063436c3248146101fc5780634f5a567b146102125780634fb73afc1461023257806352891d501461025257806360b6d9d1146102745761012a565b806301b5e81f1461015257806312065fe0146101855780631ac3d84d1461019a5780631b2ecb12146101bc5780632b142610146101dc5761012a565b3661012a57005b6040516365d5847360e11b815260206004820152600060248201526044015b60405180910390fd5b34801561015e57600080fd5b5061017261016d366004611e65565b610445565b6040519081526020015b60405180910390f35b34801561019157600080fd5b50610172610474565b3480156101a657600080fd5b506101ba6101b5366004611ec2565b6104ef565b005b3480156101c857600080fd5b506101ba6101d7366004611ee4565b610587565b3480156101e857600080fd5b506101ba6101f7366004611f7d565b6108bf565b34801561020857600080fd5b5061017260055481565b34801561021e57600080fd5b506101ba61022d366004611ee4565b610962565b34801561023e57600080fd5b506101ba61024d366004612016565b610c8b565b34801561025e57600080fd5b50610267610cfa565b60405161017c91906120b9565b34801561028057600080fd5b5061017261028f3660046121f4565b8151602081840181018051600282529282019482019490942091909352815180830184018051928152908401929093019190912091525481565b3480156102d557600080fd5b506102e96102e4366004612257565b610eb3565b6040516001600160a01b03909116815260200161017c565b34801561030d57600080fd5b506102e97f000000000000000000000000000000000000000000000000000000000000000081565b34801561034157600080fd5b506101ba610350366004612270565b610edd565b34801561036157600080fd5b506101ba6103703660046122dc565b611187565b34801561038157600080fd5b506101ba610390366004611e65565b611509565b3480156103a157600080fd5b506103b56103b0366004612327565b6115fa565b60405161017c949392919061235b565b3480156103d157600080fd5b506101ba6103e0366004612396565b6116c4565b3480156103f157600080fd5b506101ba610400366004611e65565b6117fc565b34801561041157600080fd5b506101ba610420366004612257565b611ab6565b34801561043157600080fd5b506101ba610440366004611ec2565b611b72565b600060018383604051610459929190612438565b90815260200160405180910390206002015490505b92915050565b6040516370a0823160e01b815230600482015260009073a1c57f48f0deb89f569dfbe6e2b7f46d33606fd4906370a0823190602401602060405180830381865afa1580156104c6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104ea9190612448565b905090565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614610538576040516365d5847360e11b815260040161014990612461565b600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0392909216919091179055565b61058f611cf8565b6105ac576040516365d5847360e11b8152600401610149906124b3565b6000600285856040516105c0929190612438565b908152602001604051809103902083836040516105de929190612438565b908152602001604051809103902054905080600003610640576040516365d5847360e11b815260206004820152601c60248201527f436f6e74656e742077617320616c726561647920726566756e646564000000006044820152606401610149565b600060028686604051610654929190612438565b90815260200160405180910390208484604051610672929190612438565b9081526020016040518091039020819055508060018888604051610697929190612438565b908152602001604051809103902060020160008282546106b79190612526565b909155505060405163a9059cbb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810182905260009073a1c57f48f0deb89f569dfbe6e2b7f46d33606fd49063a9059cbb906044016020604051808303816000875af1158015610740573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610764919061254d565b9050806107ad576040516365d5847360e11b815260206004820152601660248201527513585b98481d1bc810da185b9b995b0819985a5b195960521b6044820152606401610149565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031685858989876040516024016107f2959493929190612598565b60408051601f198184030181529181526020820180516001600160e01b03166372eb112f60e01b1790525161082791906125d2565b6000604051808303816000865af19150503d8060008114610864576040519150601f19603f3d011682016040523d82523d6000602084013e610869565b606091505b50509050806108b4576040516365d5847360e11b815260206004820152601660248201527518d85b1b081d1bc810da185b9b995b0819985a5b195960521b6044820152606401610149565b505050505050505050565b6108c7611cf8565b6108e4576040516365d5847360e11b8152600401610149906124b3565b60005b8181101561095b57600060028686604051610903929190612438565b9081526020016040518091039020848484818110610923576109236125ee565b90506020028101906109359190612604565b604051610943929190612438565b908152604051908190036020019020556001016108e7565b5050505050565b61096a611cf8565b610987576040516365d5847360e11b8152600401610149906124b3565b60006002858560405161099b929190612438565b908152602001604051809103902083836040516109b9929190612438565b908152602001604051809103902054905080600003610a1b576040516365d5847360e11b815260206004820152601c60248201527f436f6e74656e742077617320616c726561647920726566756e646564000000006044820152606401610149565b600060028686604051610a2f929190612438565b90815260200160405180910390208484604051610a4d929190612438565b9081526020016040518091039020819055508060018888604051610a72929190612438565b90815260200160405180910390206002016000828254610a929190612526565b909155505060405163a9059cbb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810182905260009073a1c57f48f0deb89f569dfbe6e2b7f46d33606fd49063a9059cbb906044016020604051808303816000875af1158015610b1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b3f919061254d565b905080610b88576040516365d5847360e11b815260206004820152601660248201527513585b98481d1bc810da185b9b995b0811985a5b195960521b6044820152606401610149565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316858585604051602401610bc99392919061264a565b60408051601f198184030181529181526020820180516001600160e01b031663c37e166760e01b17905251610bfe91906125d2565b6000604051808303816000865af19150503d8060008114610c3b576040519150601f19603f3d011682016040523d82523d6000602084013e610c40565b606091505b50509050806108b4576040516365d5847360e11b815260206004820152601660248201527510d85b1b081d1bc818da185b9b995b0811985a5b195960521b6044820152606401610149565b610c93611cf8565b610cb0576040516365d5847360e11b8152600401610149906124b3565b8060018484604051610cc3929190612438565b90815260405190819003602001902060010180546001600160a01b03929092166001600160a01b0319909216919091179055505050565b6004546060906000906001600160401b03811115610d1a57610d1a612152565b604051908082528060200260200182016040528015610d6d57816020015b60408051608081018252606080825260006020808401829052938301819052908201528252600019909201910181610d385790505b50905060005b600454811015610ead57600160048281548110610d9257610d926125ee565b9060005260206000209060040201600001604051610db091906126a2565b9081526020016040518091039020604051806080016040529081600082018054610dd99061266e565b80601f0160208091040260200160405190810160405280929190818152602001828054610e059061266e565b8015610e525780601f10610e2757610100808354040283529160200191610e52565b820191906000526020600020905b815481529060010190602001808311610e3557829003601f168201915b505050918352505060018201546001600160a01b031660208201526002820154604082015260039091015460ff166060909101528251839083908110610e9a57610e9a6125ee565b6020908102919091010152600101610d73565b50919050565b60008181548110610ec357600080fd5b6000918252602090912001546001600160a01b0316905081565b610ee5611cf8565b610f02576040516365d5847360e11b8152600401610149906124b3565b7fc5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a47060018585604051610f35929190612438565b90815260405160209181900382018120610f51929091016126a2565b6040516020818303038152906040528051906020012014610fb5576040516365d5847360e11b815260206004820152601d60248201527f436f6e74656e742043726561746f7220416c72656164792045786973740000006044820152606401610149565b600b8160ff16111561100a576040516365d5847360e11b815260206004820152601e60248201527f52616e6b2063616e6e6f742062652067726561746572207468616e20313100006044820152606401610149565b6040805160a06020601f8701819004028201810190925260808101858152600092829190889088908190850183828082843760009201829052509385525050506001600160a01b03861660208301526040820181905260ff851660609092019190915260048054600181018255918190528251929350839291027f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b019081906110b39082612768565b506020820151600182810180546001600160a01b0319166001600160a01b039093169290921790915560408084015160028401556060909301516003909201805460ff191660ff9093169290921790915590518291906111169088908890612438565b908152604051908190036020019020815181906111339082612768565b5060208201516001820180546001600160a01b0319166001600160a01b03909216919091179055604082015160028201556060909101516003909101805460ff191660ff9092169190911790555050505050565b60006001848460405161119b929190612438565b90815260200160405180910390209050816111b98260020154611d55565b1215611218576040516365d5847360e11b815260206004820152602760248201527f54686520616d6f756e7420656e7465726564206578636565647320796f75722060448201526662616c616e636560c81b6064820152608401610149565b60018101546001600160a01b03163314611281576040516365d5847360e11b815260206004820152602360248201527f4d7573742063616c6c2066726f6d20796f75722061646472657373206f6e2066604482015262696c6560e81b6064820152608401610149565b600381015460ff166001036112d9576040516365d5847360e11b815260206004820152601760248201527f4d757374206265206174206c656173742072616e6b20320000000000000000006044820152606401610149565b60006112e3611d98565b6112f1846305f5e100612827565b6112fb9190612854565b9050808260020160008282546113119190612526565b9091555060009050606461132683600a612827565b6113309190612854565b9050600061133e8284612868565b60405163a9059cbb60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001660048201526024810184905290915060009073a1c57f48f0deb89f569dfbe6e2b7f46d33606fd49063a9059cbb906044016020604051808303816000875af11580156113c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113e9919061254d565b905080611432576040516365d5847360e11b815260206004820152601660248201527513585b9848151bc810dbdb5c185b9e4811985a5b195960521b6044820152606401610149565b600185015460405163a9059cbb60e01b81526001600160a01b0390911660048201526024810183905260009073a1c57f48f0deb89f569dfbe6e2b7f46d33606fd49063a9059cbb906044016020604051808303816000875af115801561149c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c0919061254d565b9050806108b4576040516365d5847360e11b815260206004820152601660248201527513585b9848151bc810dc99585d1bdc8811985a5b195960521b6044820152606401610149565b611511611cf8565b61152e576040516365d5847360e11b8152600401610149906124b3565b60018282604051611540929190612438565b9081526040519081900360200190206003015460ff16600b036115a6576040516365d5847360e11b815260206004820152601d60248201527f52616e6b2063616e6e6f7420626520686967686572207468616e2031310000006044820152606401610149565b60018083836040516115b9929190612438565b90815260405190819003602001902060030180546000906115de90849060ff1661287b565b92506101000a81548160ff021916908360ff1602179055505050565b80516020818301810180516001825292820191909301209152805481906116209061266e565b80601f016020809104026020016040519081016040528092919081815260200182805461164c9061266e565b80156116995780601f1061166e57610100808354040283529160200191611699565b820191906000526020600020905b81548152906001019060200180831161167c57829003601f168201915b505050506001830154600284015460039094015492936001600160a01b039091169290915060ff1684565b6116cc611cf8565b6116e9576040516365d5847360e11b8152600401610149906124b3565b600285856040516116fb929190612438565b90815260200160405180910390208383604051611719929190612438565b908152602001604051809103902054600014611778576040516365d5847360e11b815260206004820152601860248201527f416c7265616479207061696420666f7220636f6e74656e7400000000000000006044820152606401610149565b806001888860405161178b929190612438565b908152602001604051809103902060020160008282546117ab9190612894565b9250508190555080600286866040516117c5929190612438565b908152602001604051809103902084846040516117e3929190612438565b9081526040519081900360200190205550505050505050565b611804611cf8565b611821576040516365d5847360e11b8152600401610149906124b3565b600060018383604051611835929190612438565b90815260200160405180910390209050600081600201541315611ab15760006118618260020154611d55565b90506000600554670de0b6b3a764000061187b9190612827565b600384015461188f9060019060ff166128bc565b61189a9060026129b9565b6118a49190612827565b9050808213156119c95760006118b8611d98565b6118c6836305f5e100612827565b6118d09190612854565b9050808460020160008282546118e69190612526565b9091555050600184015460405163a9059cbb60e01b81526001600160a01b0390911660048201526024810182905260009073a1c57f48f0deb89f569dfbe6e2b7f46d33606fd49063a9059cbb906044016020604051808303816000875af1158015611955573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611979919061254d565b9050806119c2576040516365d5847360e11b815260206004820152601660248201527513585b98481d1bc810dc99585d1bdc8819985a5b195960521b6044820152606401610149565b505061095b565b600283018054600091829055600185015460405163a9059cbb60e01b81526001600160a01b0390911660048201526024810182905290919073a1c57f48f0deb89f569dfbe6e2b7f46d33606fd49063a9059cbb906044016020604051808303816000875af1158015611a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a63919061254d565b905080611aac576040516365d5847360e11b815260206004820152601660248201527513585b98481d1bc810dc99585d1bdc8819985a5b195960521b6044820152606401610149565b505050505b505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611aff576040516365d5847360e11b815260040161014990612461565b8060055410611b6d576040516365d5847360e11b815260206004820152603360248201527f4e6577206261736520706179206d7573742062652067726561746572207468616044820152726e2070726576696f757320626173652070617960681b6064820152608401610149565b600555565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611bbb576040516365d5847360e11b815260040161014990612461565b60025b600054811015611caf57816001600160a01b031660008281548110611be557611be56125ee565b6000918252602090912001546001600160a01b031603611ca75760008054611c0f90600190612868565b81548110611c1f57611c1f6125ee565b600091825260208220015481546001600160a01b03909116919083908110611c4957611c496125ee565b6000918252602082200180546001600160a01b0319166001600160a01b039390931692909217909155805480611c8157611c816129c8565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b600101611bbe565b5060405162461bcd60e51b815260206004820152601760248201527f41646472657373206e6f7420616e204f766572736565720000000000000000006044820152606401610149565b6000805b600054811015611d4d57336001600160a01b031660008281548110611d2357611d236125ee565b6000918252602090912001546001600160a01b031603611d4557600191505090565b600101611cfc565b506000905090565b600080611d60611d98565b611d6f906402540be4006129de565b90506000670de0b6b3a7640000611d8685846129de565b611d909190612a0e565b949350505050565b600080600360009054906101000a90046001600160a01b03166001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611dee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e129190612a56565b509195945050505050565b60008083601f840112611e2f57600080fd5b5081356001600160401b03811115611e4657600080fd5b602083019150836020828501011115611e5e57600080fd5b9250929050565b60008060208385031215611e7857600080fd5b82356001600160401b03811115611e8e57600080fd5b611e9a85828601611e1d565b90969095509350505050565b80356001600160a01b0381168114611ebd57600080fd5b919050565b600060208284031215611ed457600080fd5b611edd82611ea6565b9392505050565b60008060008060008060608789031215611efd57600080fd5b86356001600160401b0380821115611f1457600080fd5b611f208a838b01611e1d565b90985096506020890135915080821115611f3957600080fd5b611f458a838b01611e1d565b90965094506040890135915080821115611f5e57600080fd5b50611f6b89828a01611e1d565b979a9699509497509295939492505050565b60008060008060408587031215611f9357600080fd5b84356001600160401b0380821115611faa57600080fd5b611fb688838901611e1d565b90965094506020870135915080821115611fcf57600080fd5b818701915087601f830112611fe357600080fd5b813581811115611ff257600080fd5b8860208260051b850101111561200757600080fd5b95989497505060200194505050565b60008060006040848603121561202b57600080fd5b83356001600160401b0381111561204157600080fd5b61204d86828701611e1d565b9094509250612060905060208501611ea6565b90509250925092565b60005b8381101561208457818101518382015260200161206c565b50506000910152565b600081518084526120a5816020860160208601612069565b601f01601f19169290920160200192915050565b600060208083018184528085518083526040925060408601915060408160051b87010184880160005b8381101561214457603f198984030185528151608081518186526121088287018261208d565b838b01516001600160a01b0316878c0152898401518a88015260609384015160ff169390960192909252505093860193908601906001016120e2565b509098975050505050505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261217957600080fd5b81356001600160401b038082111561219357612193612152565b604051601f8301601f19908116603f011681019082821181831017156121bb576121bb612152565b816040528381528660208588010111156121d457600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806040838503121561220757600080fd5b82356001600160401b038082111561221e57600080fd5b61222a86838701612168565b9350602085013591508082111561224057600080fd5b5061224d85828601612168565b9150509250929050565b60006020828403121561226957600080fd5b5035919050565b6000806000806060858703121561228657600080fd5b84356001600160401b0381111561229c57600080fd5b6122a887828801611e1d565b90955093506122bb905060208601611ea6565b9150604085013560ff811681146122d157600080fd5b939692955090935050565b6000806000604084860312156122f157600080fd5b83356001600160401b0381111561230757600080fd5b61231386828701611e1d565b909790965060209590950135949350505050565b60006020828403121561233957600080fd5b81356001600160401b0381111561234f57600080fd5b611d9084828501612168565b60808152600061236e608083018761208d565b6001600160a01b0395909516602083015250604081019290925260ff16606090910152919050565b60008060008060008060006080888a0312156123b157600080fd5b87356001600160401b03808211156123c857600080fd5b6123d48b838c01611e1d565b909950975060208a01359150808211156123ed57600080fd5b6123f98b838c01611e1d565b909750955060408a013591508082111561241257600080fd5b5061241f8a828b01611e1d565b989b979a50959894979596606090950135949350505050565b8183823760009101908152919050565b60006020828403121561245a57600080fd5b5051919050565b60208082526032908201527f546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656460408201527108189e4810dbdb5c185b9e4815d85b1b195d60721b606082015260800190565b60208082526038908201527f546869732066756e6374696f6e2063616e206f6e6c792062652063616c6c656460408201527f20627920616e20416c6c6f776564204164647265737365730000000000000000606082015260800190565b634e487b7160e01b600052601160045260246000fd5b818103600083128015838313168383128216171561254657612546612510565b5092915050565b60006020828403121561255f57600080fd5b81518015158114611edd57600080fd5b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b6060815260006125ac60608301878961256f565b82810360208401526125bf81868861256f565b9150508260408301529695505050505050565b600082516125e4818460208701612069565b9190910192915050565b634e487b7160e01b600052603260045260246000fd5b6000808335601e1984360301811261261b57600080fd5b8301803591506001600160401b0382111561263557600080fd5b602001915036819003821315611e5e57600080fd5b60408152600061265e60408301858761256f565b9050826020830152949350505050565b600181811c9082168061268257607f821691505b602082108103610ead57634e487b7160e01b600052602260045260246000fd5b60008083546126b08161266e565b600182811680156126c857600181146126dd5761270c565b60ff198416875282151583028701945061270c565b8760005260208060002060005b858110156127035781548a8201529084019082016126ea565b50505082870194505b50929695505050505050565b601f821115611ab1576000816000526020600020601f850160051c810160208610156127415750805b601f850160051c820191505b818110156127605782815560010161274d565b505050505050565b81516001600160401b0381111561278157612781612152565b6127958161278f845461266e565b84612718565b602080601f8311600181146127ca57600084156127b25750858301515b600019600386901b1c1916600185901b178555612760565b600085815260208120601f198616915b828110156127f9578886015182559484019460019091019084016127da565b50858210156128175787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b808202811582820484141761046e5761046e612510565b634e487b7160e01b600052601260045260246000fd5b6000826128635761286361283e565b500490565b8181038181111561046e5761046e612510565b60ff818116838216019081111561046e5761046e612510565b80820182811260008312801582168215821617156128b4576128b4612510565b505092915050565b60ff828116828216039081111561046e5761046e612510565b600181815b808511156129105781600019048211156128f6576128f6612510565b8085161561290357918102915b93841c93908002906128da565b509250929050565b6000826129275750600161046e565b816129345750600061046e565b816001811461294a576002811461295457612970565b600191505061046e565b60ff84111561296557612965612510565b50506001821b61046e565b5060208310610133831016604e8410600b8410161715612993575081810a61046e565b61299d83836128d5565b80600019048211156129b1576129b1612510565b029392505050565b6000611edd60ff841683612918565b634e487b7160e01b600052603160045260246000fd5b80820260008212600160ff1b841416156129fa576129fa612510565b818105831482151761046e5761046e612510565b600082612a1d57612a1d61283e565b600160ff1b821460001984141615612a3757612a37612510565b500590565b805169ffffffffffffffffffff81168114611ebd57600080fd5b600080600080600060a08688031215612a6e57600080fd5b612a7786612a3c565b9450602086015193506040860151925060608601519150612a9a60808701612a3c565b9050929550929590935056fea2646970667358221220335028cb1908837e9bc865b94e5ec4430cea8323787d1bd35cb894b32b3182db64736f6c63430008190033";

    public static final String FUNC_ADDALLOWEDCONTRACTADDRESSES = "addAllowedContractAddresses";

    public static final String FUNC_ADDCONTENTCREATOR = "addContentCreator";

    public static final String FUNC_BASEPAY = "basePay";

    public static final String FUNC_FINDBALENCE = "findBalence";

    public static final String FUNC_FINDCONTENTCREATORBYID = "findContentCreatorByID";

    public static final String FUNC_GETALLCONTENTCREATORS = "getAllContentCreators";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_GETCREATORSBALENCE = "getCreatorsBalence";

    public static final String FUNC_INCREASECREATORRANK = "increaseCreatorRank";

    public static final String FUNC_RAISEBASEPAY = "raiseBasePay";

    public static final String FUNC_REACTIVATECONTENT = "reactivateContent";

    public static final String FUNC_RECEIVEPAYMENT = "receivePayment";

    public static final String FUNC_SENDREFUNDPAYMENT = "sendRefundPayment";

    public static final String FUNC_SENDWATCHNOWPAYLATERREFUNDPAYMENT = "sendWatchNowPayLaterRefundPayment";

    public static final String FUNC_SENDWEEKLYMANA = "sendWeeklyMana";

    public static final String FUNC_UPDATEPERSONALWALLET = "updatePersonalWallet";

    public static final String FUNC_UPGRADEALLOWEDCONTRACTADDRESS = "upgradeAllowedContractAddress";

    public static final String FUNC_USERWITHDRAW = "userWithdraw";

    @Deprecated
    protected WarChestService(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    public WarChestService(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected WarChestService(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected WarChestService(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> addAllowedContractAddresses(String _newContractAddress) {
        final Function function = new Function(
                FUNC_ADDALLOWEDCONTRACTADDRESSES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _newContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addContentCreator(String _userID, String _personalWallet, BigInteger _rank) {
        final Function function = new Function(
                FUNC_ADDCONTENTCREATOR, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_userID), 
                new org.web3j.abi.datatypes.Address(160, _personalWallet), 
                new org.web3j.abi.datatypes.generated.Uint8(_rank)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> basePay() {
        final Function function = new Function(FUNC_BASEPAY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> findBalence(String contentID, String channelName) {
        final Function function = new Function(FUNC_FINDBALENCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(contentID), 
                new org.web3j.abi.datatypes.Utf8String(channelName)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple4<String, String, BigInteger, BigInteger>> findContentCreatorByID(String userID) {
        final Function function = new Function(FUNC_FINDCONTENTCREATORBYID, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(userID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Uint8>() {}));
        return new RemoteFunctionCall<Tuple4<String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple4<String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple4<String, String, BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple4<String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue());
                    }
                });
    }

//    public RemoteFunctionCall<List> getAllContentCreators() {
//        final Function function = new Function(FUNC_GETALLCONTENTCREATORS,
//                Arrays.<Type>asList(),
//                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<ContentCreator>>() {}));
//        return new RemoteFunctionCall<List>(function,
//                new Callable<List>() {
//                    @Override
//                    @SuppressWarnings("unchecked")
//                    public List call() throws Exception {
//                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
//                        return convertToNative(result);
//                    }
//                });
//    }

    public RemoteFunctionCall<BigInteger> getBalance() {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> getCreatorsBalence(String _userID) {
        final Function function = new Function(FUNC_GETCREATORSBALENCE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_userID)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> increaseCreatorRank(String _userID) {
        final Function function = new Function(
                FUNC_INCREASECREATORRANK, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_userID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> raiseBasePay(BigInteger _newBasePay) {
        final Function function = new Function(
                FUNC_RAISEBASEPAY, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_newBasePay)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> reactivateContent(String _contentID, List<String> previousWinners) {
        final Function function = new Function(
                FUNC_REACTIVATECONTENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_contentID), 
                new org.web3j.abi.datatypes.DynamicArray<org.web3j.abi.datatypes.Utf8String>(
                        org.web3j.abi.datatypes.Utf8String.class,
                        org.web3j.abi.Utils.typeMap(previousWinners, org.web3j.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> receivePayment(String _contentCreatorID, String _contentID, String _channelName, BigInteger amount) {
        final Function function = new Function(
                FUNC_RECEIVEPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_contentCreatorID), 
                new org.web3j.abi.datatypes.Utf8String(_contentID), 
                new org.web3j.abi.datatypes.Utf8String(_channelName), 
                new org.web3j.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendRefundPayment(String _contentCreatorID, String _contentID, String _channelName) {
        final Function function = new Function(
                FUNC_SENDREFUNDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_contentCreatorID), 
                new org.web3j.abi.datatypes.Utf8String(_contentID), 
                new org.web3j.abi.datatypes.Utf8String(_channelName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendWatchNowPayLaterRefundPayment(String _contentCreatorID, String _contentID, String _channelName) {
        final Function function = new Function(
                FUNC_SENDWATCHNOWPAYLATERREFUNDPAYMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_contentCreatorID), 
                new org.web3j.abi.datatypes.Utf8String(_contentID), 
                new org.web3j.abi.datatypes.Utf8String(_channelName)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> sendWeeklyMana(String creatorID) {
        final Function function = new Function(
                FUNC_SENDWEEKLYMANA, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(creatorID)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updatePersonalWallet(String _userID, String _newPersonalWallet) {
        final Function function = new Function(
                FUNC_UPDATEPERSONALWALLET, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_userID), 
                new org.web3j.abi.datatypes.Address(160, _newPersonalWallet)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> upgradeAllowedContractAddress(String _oldContractAddress, String _newContractAddress) {
        final Function function = new Function(
                FUNC_UPGRADEALLOWEDCONTRACTADDRESS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _oldContractAddress), 
                new org.web3j.abi.datatypes.Address(160, _newContractAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> userWithdraw(String _userID, BigInteger _dollarAmountInWei) {
        final Function function = new Function(
                FUNC_USERWITHDRAW, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Utf8String(_userID), 
                new org.web3j.abi.datatypes.generated.Uint256(_dollarAmountInWei)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public static WarChestService load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new WarChestService(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static WarChestService load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new WarChestService(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<WarChestService> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider, String _channelServiceAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _channelServiceAddress)));
        return deployRemoteCall(WarChestService.class, web3j, credentials, contractGasProvider, BINARY, encodedConstructor);
    }

    public static RemoteCall<WarChestService> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider, String _channelServiceAddress) {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _channelServiceAddress)));
        return deployRemoteCall(WarChestService.class, web3j, transactionManager, contractGasProvider, BINARY, encodedConstructor);
    }

//
//    public static class ContentCreator extends DynamicStruct {
//        public String userID;
//
//        public String personalWallet;
//
//        public BigInteger balence;
//
//        public BigInteger rank;
//
//        public ContentCreator(String userID, String personalWallet, BigInteger balence, BigInteger rank) {
//            super(new org.web3j.abi.datatypes.Utf8String(userID),
//                    new org.web3j.abi.datatypes.Address(160, personalWallet),
//                    new org.web3j.abi.datatypes.generated.Int256(balence),
//                    new org.web3j.abi.datatypes.generated.Uint8(rank));
//            this.userID = userID;
//            this.personalWallet = personalWallet;
//            this.balence = balence;
//            this.rank = rank;
//        }
//
//        public ContentCreator(Utf8String userID, Address personalWallet, Int256 balence, Uint8 rank) {
//            super(userID, personalWallet, balence, rank);
//            this.userID = userID.getValue();
//            this.personalWallet = personalWallet.getValue();
//            this.balence = balence.getValue();
//            this.rank = rank.getValue();
//        }
//    }
}
